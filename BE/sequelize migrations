Sequelize migrations

Let's say we have a table and we want to change name of a column and perserve data while we do so then we have to perform DB migrations.

1. First step is to change model definition, this will not change database unless we drop it. If we have somewhere within our project sync({ force: true }) in that case DB will get dropped and changes will be visible.

2. Install sequelize cli npm i -g sequelize-cli to print all commands type sequelize.

3. sequelize init will create config.json, that config file represents DB credentials, you can change config.json to .js and pass credentials from .env which is usefull for other types of environments like staging and production.

4. sequelize init:migrations this will create migrations folder 

5. sequelize migration:generate --name [migration-name] this will create new migration file that will be named something like [timestamp]-[migration-name].js. This file will export an object that contains two functions up and down. Logic to update our DB will go into up function, and if we want to revert migration for some reason in case something went wrong then logic for rollback will go into down function. example of how those functions look:

module.exports = {
    up: (queryInterface, Sequelize) => {

    },
    down: (queryInterface, Sequelize) => {

    }
}

In order to complete our task which is renaming our columns we are going to use queryInterface argument, you can consult sequelize documentation for all possible actions that you can perform with it, example for our task:

// In up function,
// renameColumn is a Promise and up returns a promise so we need to do return

return Promise.all([
    queryInterface.renameColumn('students', 'testScore1', 'quizScore1'),
    queryInterface.renameColumn('students', 'testScore2', 'quizScore2'),
    queryInterface.renameColumn('students', 'testScore3', 'quizScore3'),
])

// In down function

return Promise.all([
    queryInterface.renameColumn('students', 'quizScore1', 'testScore1')
    queryInterface.renameColumn('students', 'quizScore2', 'testScore2')
    queryInterface.renameColumn('students', 'quizScore3', 'testScore3')
])

6. Now to run migration file that we just implemented we need to do sequelize db:migrate, and to undo migration we do sequelize db:migrate:undo

Advanced migration (changing DataType)

Now what if we want to change our three columns into one column called quizScores which is of ARRAY type (unique to postgress)

1. Change model
    sequelize.define('student', {
        quizScores: DataTypes.ARRAY(DataTypes.INTEGERS)
    })

2. sequelize migration:generate --name quizScores

3. In quizScores migration file

    up: (queryInteface, Sequelize) => {
        return queryInterface.addColumn('students', 'quizScores', {
            type: Sequelize.ARRAY(Sequelize.INTEGERS)
        }).then(() => {
            return queryInteface.seqeuelize.query(`
                update students set 
                "quizScores"[0] = "quizScore1",
                "quizScores"[1] = "quizScore2",
                "quizScores"[2] = "quizScore3"
            `)
        }).then(() => {
            return Promise.all([
                queryInteface.removeColumn('students', 'quizScore1'),
                queryInteface.removeColumn('students', 'quizScore2'),
                queryInteface.removeColumn('students', 'quizScore3'),
            ])
        })
    }

4. sequelize db:migrate, thing about migration is once you run it you can't spam run it again, it will say everything up to date. In that case you have two choices you can create new migration all over again or do delete from "SequelizeMeta" which is not recommended because once you do it and run db:migrate you are going to run first migration as well.


