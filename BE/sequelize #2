Sequelize - Finder Methods

Sequelize model instance is essentially a row in a table/model, to view values stored in a row you can use method toJSON().
Example below will yield the same result as using data.toJSON()

sync().then(() => {
    return User.findAll({ raw: true })
}).then((data) => {
    console.log(data)
}).catch(() => {})

Example of usage with where clause

sync().then(() => {
    return User.findAll({
        where: { age: 25 }, 
        raw: true 
    })
}).then((data) => {
    console.log(data)
}).catch(() => {})

findByPk - Finding row by primary key

findByPk(28)

findOne - Return the first row that matches the condition

findOne() // This will return first row
findOne({
    where: {
        age: {
            [Op.or]: {
                [Op.lt]: 25,
                [Op.eq]: null
            }
        }
    }
})

findOrCreate - Create a row in a table if it can't find one, this functions returns an array of instance and a boolean. Boolean is signaling whether instance is found or created, boolean is true if instance was created.

findOrCreate({ 
    where: { username: 'name2' },
    defaults: {
        age: 30 // Overrides defaults enforced by model
    }
})

findAndCountAll - This method combines findAll and Count

sync().then(() => {
    return User.findAndCountAll({
        where: { username: 'name' },
        raw: true
    })
}).then((data) => {
    const { count, rows } = data;
})

Sequelize - Setters, Getters and Virtual Fields

Getters & Setters

const User = sequelize.define('user', {
    user_id: {
        type: Sequalize.DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
    },
    username: {
        type: Sequelize.DataTypes.STRING,
        allowNull: false, // It neeeds to have a value
        get() {
            // This function is called automatically whenever field value is read
            // for example when we do user.username

            const rawValue = this.getDataValue('username');

            // We use this.getDataValue('username') instead of this.username
            // because this.username will call get() and we will get infinitive loop

            // Whenever we retrieve user we are going to capitalize username
            return rawValue.toUpperCase()
        }
    },
    password: {
        type: Sequelize.DataTypes.STRING,
        set(value) {
            // value is value that is about to be stored into DB
            // to insert we use setDataValue(col_name, value)

            // setters and getters only deal with sync code so we are going to use sync bcrypt
            const salt = bcrypt.genSaltSync(12)
            const hash = bcrypt.hashSync(value, salt);
            
            this.setDataValue('password', hash)
        }
    },
    age: {
        type: Sequelize.DataTypes.INTEGER,
        defaultValue: 21,
    }
}, {
    freezeTableNAme: true, // Sequelize will be default pluralize name of the table this option will prevent it
})

Virtual fields 

Fields that sequelize populates under the hood but are not stored in DB, common use is to combine different attributes

aboutUser: {
    type: DataType.VIRTUAL, // This will not create column in DB
    get() {
        return `${this.username}: ${this.description}`
    }
}

Sequelize - Validators and Constraints

email: {
    type: DataType.STRING,
    unique: true, // ensures that this value is unique
    validate: {
        // built-in validator functions
        isEmail: true,
        isIn: ['email1@email.com', 'email2@email.com'], // If email is not included in this array it will throw an error 
    }
}

age: {
    type: DataType.INTEGER,
    validate: {
        // custom validator
        isOldEnough(value) {
            if (value < 21) throw new Error('Too young');
        }
    }
}

age: {
    type: DataType.INTEGER,
    validate: {
        // This is built-in validator, and we are overriding error message
        isNumeric {
            msg: "You must enter a number for age."
        }
    }
}

email: {
    type: DataType.STRING,
    unique: true, // ensures that this value is unique
    validate: {
        isIn: {
            args: ['email1@email.com', 'email2@email.com'],
            msg: 'The provided must be one of the following...'
        }
    }
}

If you use allowNull: true constraint on a column (which is default) then built-in validatiors will not run, but custom ones will.


This validators are column wide, we can specify model wide validation. This validation will run after all column validations.

const User = sequelize.define('user', {
    user_id: {
        type: Sequalize.DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
    },
    username: {
        type: Sequelize.DataTypes.STRING,
        allowNull: false, // It neeeds to have a value
        get() {
            // This function is called automatically whenever field value is read
            // for example when we do user.username

            const rawValue = this.getDataValue('username');

            // We use this.getDataValue('username') instead of this.username
            // because this.username will call get() and we will get infinitive loop

            // Whenever we retrieve user we are going to capitalize username
            return rawValue.toUpperCase()
        }
    },
    password: {
        type: Sequelize.DataTypes.STRING,
        set(value) {
            // value is value that is about to be stored into DB
            // to insert we use setDataValue(col_name, value)

            // setters and getters only deal with sync code so we are going to use sync bcrypt
            const salt = bcrypt.genSaltSync(12)
            const hash = bcrypt.hashSync(value, salt);
            
            this.setDataValue('password', hash)
        }
    },
    age: {
        type: Sequelize.DataTypes.INTEGER,
        defaultValue: 21,
    }
}, {
    freezeTableNAme: true,
    validate: {
        usernamePassMatch() {
            if (this.username == this.password) throw new Error("Password cannot be your username!");
        }
    }
})

Sequelize - SQL Injection and Raw Queries

Sequelize allows us to write raw queries with query() method, which returns result and metadata (how many rows where affected etc.).

sync().then(() => {
    return sequelize.query(`UPDATE user SET age = 54 WHERE username = 'name1'`)
}).then((data) => {
    [result, metadata] = data;
    console.log(result);
    console.log(metadata);
})

// This will tell sequelize what type of query are we running
// In case of SELECT type metadata is going to be omitted
sequelize.query('SELECT * FROM user', { type: QueryTypes.SELECT })


SQL Injection

Whenever we are using raw queries SQL Injection might occur, example:

// unsafe
query(`SELECT username FROM users WHERE username = ${username} AND password = ${password}`)

// safe
query(`SELECT username FROM users WHERE username = ? AND password = ?`, {
    replacement: [username, password]
})

// We can pass replacements as object
query(`SELECT username FROM users WHERE username = :username AND password IN (:passwords)`, {
    replacement: {
        username: 'username1',
        passwords: ['admin', '12345']
    }
})

// We can also pass wildcards
query(`SELECT username FROM users WHERE username LIKE :username`, {
    replacement: {
        username: 'u%', // username starts with u, and ends with whatever
    }
})

Bind Parameters

Replacements are preventing SQL Injections by escaping inputs, Bind Parameters send SQL statement and DATA to DB Server separately, so even if SQL statement is provided as DATA it would still be treated as DATA and it will not get executed.

// Notice array is one-based
query(`SELECT username FROM users WHERE username = $1 AND password = $2`, {
    bind: [username, password]
})

query(`SELECT username FROM users WHERE username = $username AND password = $passwords)`, {
    bind: {
        username: 'admin',
        passwords: 'admin'
    }
})

Sequelize - Paranoid Tables

This a table where records are deleted but not truly deleted, instead column named deleted_at has a timestamp of deletion request, think of it as a soft deletion. In order to create such table you need to add option { paranoid: true } to model define()

const User = sequelize.define('user', {
    user_id: {
        type: Sequalize.DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
    },
    username: {
        type: Sequelize.DataTypes.STRING,
        allowNull: false,
        get() {
            const rawValue = this.getDataValue('username');
            return rawValue.toUpperCase()
        }
    },
    password: {
        type: Sequelize.DataTypes.STRING,
        set(value) {
            const salt = bcrypt.genSaltSync(12)
            const hash = bcrypt.hashSync(value, salt);
            
            this.setDataValue('password', hash)
        }
    },
    age: {
        type: Sequelize.DataTypes.INTEGER,
        defaultValue: 21,
    }
}, {
    freezeTableNAme: true,
    validate: {
        usernamePassMatch() {
            if (this.username == this.password) throw new Error("Password cannot be your username!");
        }
    },
    // In order to create paranoid table we need to have this flags below set to true
    paranoid: true,
    timestamp: true
})

In order to hard delete something from paranoid table we need to use { force: true }

User.destroy({ 
    where: { user_id: 27 },
    force: true
})

Good thing about paranoid table is that you can use restore method to "restore" data, this is essentially writing nulls to deleted_at column.

User.restore({
    where: { user_id: 27 }
})

One thing to mention whenever we are selecting rows from paranoid table sequelize will automatically ignore rows where deleted_at has some value, this is not true if we are using raw queries. But if we want to get "deleted" row with sequelize we can use { paranoid: false } as an option for our select method, example:

User.findOne({ paranoid: false })

Sequelize - Associations

Associations are relationships between tables in DB, these relationships are established with FK. FK is when the PK from parent table appears in child table. Child table is table with FK, meaning it is useless on its own. There are 3 types of associations:
1. One to one
2. One to many
3. Many to many

One to one

This is association where PK from parent table appears in FK column on child table at most once.
An example would be country and its capital city, every country can have one capital city, and city can be capital of only one country.

const Country = sequelize.define('country', {
    countryName: {
        type: DataTypes.STRING,
        unique: true
    }
}, {
    timestamps: false
})

const Capital = sequelize.define('capital', {
    capitalName: {
        type: DataTypes.STRING,
        unique: true
    }
}, {
    timestamp: false
})

To create one to one relationship in sequelize we can use one of two methos hasOne() or belongsTo()

Country.hasOne(Capital); // this will automatically add countryId to capitals table as FK

The way sequelize did this is by taking name of PK key which is id by default and prepending name of the model which is country thus giving countryId. This of course can be customized.

Country.hasOne(Capital, { foreignKey: 'custom_fk_name' });

Linking records with hasOne helper method

Because we used hasOne method we got following helper methods that we can use: getCapital, setCapital, createCapital

let country, capital;

capital = await Capital.findOne({ where: { capitalName: 'Madrid' }})
country = await Country.findOne({ where: { countryName: 'Spain' }})

await country.setCapital(capital) // This is how link those two together

If we want to find what is capital of some country we can use get method to do this

country = await Country.findOne({ where: { countryName: 'Spain' }})
capital = await country.getCapital() // This is how we get 'Madrid'

If we want to create capital while we are creating country we can do it in following manner:

country = await Country.create({ countryName: 'USA' })
await country.createCapital({ capitalName: 'Washington, D.C.' })

belongsTo does the same thing as hasOne so writing Capital.belongsTo(Country) will yield the same exact result as Country.hasOne(Capital) in DB, belongsTo of course returns different helper methods like setCountry, getCountry, and createCountry. It is a good practice to use both of them because helper methods will get attached to source model and then you can conveniently use it.

One thing to mention when you are using this association method you can customize foreignKey column like you would do with any other column during model definition, example:

County.hasOne(Capital, {
    foreignKey: {
        name: 'custom_name',
        type: DataTypes.INTEGER,
        allowNull: false
    }
})
// And you need to repeat this in your belongsTo method.

hasOne and belongsTo have additional trigger options like onDelete and onUpdate.

County.hasOne(Capital, {
    onDelete: 'CASCADE' // if we delete a country delete all child rows associated with it will be removed
    onUpdate: 'CASCADE' // this will update every row in child table that is associated
})

// for example this will delete 'Madrid' row as well
Country.destroy({ where: { countryName: 'Spain' }})

One thing to mention is that hasOne is exclusive to one-to-one while belongsTo is not and it can be used with one-to-many relationships, which means that you can use capital.setCountry(country) and set two different capitals to point to the same country.

One to Many

Association where PK from parent table may appear in FK column on child table more then once, example would be user and posts, meaning one user can have many posts. Methods for this type of association are hasMany and belongsTo.

User.hasMany(Post)

One of helper methods that gets attached to User model is addPosts

const user = await User.findOne({ where: { username: 'name1' }});
const posts = await Post.findAll();

// This will make that all FK in posts table are going to point to 'name1' user
await user.addPosts(posts);

We can user another helper method provided called countPosts

// This will return how many posts belong to 'name1'
await user.countPosts();

There are remove helpers like removePost and removePosts, example

const post = await Post.findOne();
user.removePost(post) // this will set userId FK column to NULL

if we want to delete all posts related to user one we delete user we do this by specifing onDelete: 'CASCADE'

User.hasMany(Post, { onDelete: 'CASCADE' })

Many to Many

Association where a child table (join table) contains two FK columns referencing the PK column of the two parent tables. Example would be Customer and Product, Customer can purchase many products, and product can be purchased by many customers. Here we have to main tables Product and Customers with their PKs and join table that holds their PKs.

Since relational DBs do not provide you with a way to directly implement many-to-many relationship, the way we do it is by creating multiple one-to-many relationships and storing them in extra table called junction model.

Implementation of many-to-many

Customer.belongsToMany(Product, {
    through: 'customerproduct' // junction table, this is requried
    foreignKey: 'customer_id'
})
Product.belongsToMany(Customer, {
    through: 'customerproduct',
    foreignKey: 'product_id'
})

We can create junction table ourselves

const CustomerProduct = sequelize.define({
    customerproductId: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    }
}, { timestamps: false })

Customer.belongsToMany(Product, {
    through: CustomerProduct // we are passing model instead of a string
})
Product.belongsToMany(Customer, {
    through: CustomerProduct
})

Helper methods provided by belongsToMany are exact same as those provided by hasMany.
As for onDelete and onUpdate default value is 'CASCADE' so we don't need to explicitly specify that.
















